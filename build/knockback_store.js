// Generated by CoffeeScript 1.3.1
/*
  knockback_store.js
  (c) 2012 Kevin Malakoff.
  Knockback.Store is freely distributable under the MIT license.
  See the following for full license details:
    https://github.com/kmalakoff/knockback/blob/master/LICENSE
*/

Knockback.Store = (function() {

  Store.name = 'Store';

  function Store() {
    this.keys = [];
    this.values = [];
  }

  Store.prototype.destroy = function() {
    var index, value, _ref, _ref1;
    this.keys = null;
    _ref = this.values;
    for (index in _ref) {
      value = _ref[index];
      if (!kb.utils.observableInstanceOf(value, kb.CollectionObservable)) {
        continue;
      }
      this.values[index] = null;
      while (value.refCount() > 0) {
        value.release();
      }
    }
    _ref1 = this.values;
    for (index in _ref1) {
      value = _ref1[index];
      if (!value) {
        continue;
      }
      this.values[index] = null;
      if (value instanceof kb.RefCountable) {
        while (value.refCount() > 0) {
          value.release();
        }
      } else {
        kb.utils.release(value);
      }
    }
    return this.values = null;
  };

  Store.prototype.register = function(key, value) {
    var index;
    if (value instanceof kb.RefCountable) {
      value.retain();
    }
    index = _.indexOf(this.keys, key);
    if (index >= 0) {
      this.values[index] = value;
    } else {
      this.keys.push(key);
      this.values.push(value);
    }
    return value;
  };

  Store.prototype.resolve = function(key, create_fn, args) {
    var index, value;
    index = _.indexOf(this.keys, key);
    if (index >= 0) {
      if (this.values[index]) {
        if ((this.values[index] instanceof kb.RefCountable) && (this.values[index].refCount() <= 0)) {
          this.values[index] = null;
        } else {
          if (this.values[index] instanceof kb.RefCountable) {
            return this.values[index].retain();
          } else {
            return this.values[index];
          }
        }
      }
    } else {
      index = this.keys.length;
      this.keys.push(key);
      this.values.push(void 0);
    }
    value = create_fn.apply(null, Array.prototype.slice.call(arguments, 2));
    if (this.keys[index] !== key) {
      this.register(key, value);
    } else if (!this.values[index]) {
      if (value instanceof kb.RefCountable) {
        value.retain();
      }
      this.values[index] = value;
    }
    return value;
  };

  Store.prototype.release = function(value) {
    var index;
    if (!(value instanceof kb.RefCountable)) {
      return;
    }
    value.release();
    if (value.refCount() > 0) {
      return;
    }
    index = _.indexOf(this.values, value);
    if (!(index >= 0)) {
      return;
    }
    return this.values[index] = 0;
  };

  Store.prototype.addResolverToOptions = function(options, key) {
    return _.extend(options, {
      store: this,
      store_key: key
    });
  };

  Store.resolveFromOptions = function(options, value) {
    if (!(options.store && options.store_key)) {
      return;
    }
    return options.store.register(options.store_key, value);
  };

  return Store;

})();
