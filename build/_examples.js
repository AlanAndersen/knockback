// Generated by CoffeeScript 1.3.3
(function() {
  var Backbone, kb, ko, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = !this._ && (typeof require !== 'undefined') ? require('underscore') : this._;

  Backbone = !this.Backbone && (typeof require !== 'undefined') ? require('backbone') : this.Backbone;

  ko = !this.ko && (typeof require !== 'undefined') ? require('knockout') : this.ko;

  kb = !this.kb && (typeof require !== 'undefined') ? require('knockback') : this.kb;

  kb._ || (kb._ = {});

  kb._.Contact = Backbone.Model.extend({
    defaults: {
      name: '',
      number: 0,
      date: new Date()
    }
  });

  kb._.ContactsCollection = Backbone.Collection.extend({
    model: kb._.Contact
  });

  kb._.NameSortedContactsCollection = Backbone.Collection.extend({
    model: kb._.Contact,
    comparator: function(model) {
      return model.get('name');
    }
  });

  kb._.LocaleManager = (function() {

    function LocaleManager(locale_identifier, translations_by_locale) {
      this.translations_by_locale = translations_by_locale;
      if (locale_identifier) {
        this.setLocale(locale_identifier);
      }
    }

    LocaleManager.prototype.get = function(string_id, parameters) {
      var arg, culture_map, index, string, _i, _len, _ref;
      if (this.locale_identifier) {
        culture_map = this.translations_by_locale[this.locale_identifier];
      }
      if (!culture_map) {
        return '';
      }
      string = culture_map.hasOwnProperty(string_id) ? culture_map[string_id] : '';
      if (arguments === 1) {
        return string;
      }
      _ref = Array.prototype.slice.call(arguments, 1);
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        arg = _ref[index];
        string = string.replace("{" + index + "}", arg);
      }
      return string;
    };

    LocaleManager.prototype.getLocale = function() {
      return this.locale_identifier;
    };

    LocaleManager.prototype.setLocale = function(locale_identifier) {
      var culture_map, key, value, _results;
      this.locale_identifier = locale_identifier;
      Globalize.culture = Globalize.findClosestCulture(locale_identifier);
      this.trigger('change', this);
      culture_map = this.translations_by_locale[this.locale_identifier];
      if (!culture_map) {
        return;
      }
      _results = [];
      for (key in culture_map) {
        value = culture_map[key];
        _results.push(this.trigger("change:" + key, value));
      }
      return _results;
    };

    LocaleManager.prototype.getLocales = function() {
      var locales, string_id, value, _ref;
      locales = [];
      _ref = this.translations_by_locale;
      for (string_id in _ref) {
        value = _ref[string_id];
        locales.push(string_id);
      }
      return locales;
    };

    return LocaleManager;

  })();

  __extends(kb._.LocaleManager.prototype, Backbone.Events);

  kb._.LocalizedStringLocalizer = (function(_super) {

    __extends(LocalizedStringLocalizer, _super);

    function LocalizedStringLocalizer(value, options, view_model) {
      LocalizedStringLocalizer.__super__.constructor.apply(this, arguments);
      return kb.utils.wrappedObservable(this);
    }

    LocalizedStringLocalizer.prototype.read = function(value) {
      if (value.string_id) {
        return kb.locale_manager.get(value.string_id);
      } else {
        return '';
      }
    };

    return LocalizedStringLocalizer;

  })(kb.LocalizedObservable);

  kb._.LongDateLocalizer = (function(_super) {

    __extends(LongDateLocalizer, _super);

    function LongDateLocalizer(value, options, view_model) {
      LongDateLocalizer.__super__.constructor.apply(this, arguments);
      return kb.utils.wrappedObservable(this);
    }

    LongDateLocalizer.prototype.read = function(value) {
      return Globalize.format(value, 'dd MMMM yyyy', kb.locale_manager.getLocale());
    };

    LongDateLocalizer.prototype.write = function(localized_string, value) {
      var new_value;
      new_value = Globalize.parseDate(localized_string, 'dd MMMM yyyy', kb.locale_manager.getLocale());
      if (!(new_value && _.isDate(new_value))) {
        return kb.utils.wrappedObservable(this).resetToCurrent();
      }
      return value.setTime(new_value.valueOf());
    };

    return LongDateLocalizer;

  })(kb.LocalizedObservable);

  kb._.ShortDateLocalizer = kb.LocalizedObservable.extend({
    constructor: function(value, options, view_model) {
      kb.LocalizedObservable.prototype.constructor.apply(this, arguments);
      return kb.utils.wrappedObservable(this);
    },
    read: function(value) {
      return Globalize.format(value, Globalize.cultures[kb.locale_manager.getLocale()].calendars.standard.patterns.d, kb.locale_manager.getLocale());
    },
    write: function(localized_string, value) {
      var new_value;
      new_value = Globalize.parseDate(localized_string, Globalize.cultures[kb.locale_manager.getLocale()].calendars.standard.patterns.d, kb.locale_manager.getLocale());
      if (!(new_value && _.isDate(new_value))) {
        return kb.utils.wrappedObservable(this).resetToCurrent();
      }
      return value.setTime(new_value.valueOf());
    }
  });

  kb._.LocalizedString = (function() {

    function LocalizedString(string_id) {
      this.string_id = string_id;
      if (!kb.locale_manager) {
        throw 'missing kb.locale_manager';
      }
      this.string = kb.locale_manager.get(this.string_id);
    }

    return LocalizedString;

  })();

}).call(this);
