// Generated by CoffeeScript 1.3.1
/*
  knockback_collection_observable.js
  (c) 2011 Kevin Malakoff.
  Knockback.CollectionObservable is freely distributable under the MIT license.
  See the following for full license details:
    https://github.com/kmalakoff/knockback/blob/master/LICENSE
*/

var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Knockback.CollectionObservable = (function(_super) {

  __extends(CollectionObservable, _super);

  CollectionObservable.name = 'CollectionObservable';

  function CollectionObservable(collection, options) {
    var bind_model_changes, observable,
      _this = this;
    if (options == null) {
      options = {};
    }
    if (!collection) {
      throw new Error('CollectionObservable: collection is missing');
    }
    CollectionObservable.__super__.constructor.apply(this, arguments);
    if (Knockback.stats_on) {
      kb.stats.collection_observables++;
    }
    if (ko.isObservable(options) && options.hasOwnProperty('indexOf')) {
      kb.utils.legacyWarning('kb.collectionObservable with an external ko.observableArray', '0.16.0', 'Please use the kb.collectionObservable directly instead of passing a ko.observableArray');
      observable = kb.utils.wrappedObservable(this, options);
      options = arguments[2] || {};
      bind_model_changes = true;
    } else {
      observable = kb.utils.wrappedObservable(this, ko.observableArray([]));
    }
    if (!options.store_skip_resolve) {
      kb.Store.resolveFromOptions(options, kb.utils.wrappedObservable(this));
    }
    if (options.store) {
      this.__kb.store = options.store;
    } else {
      this.__kb.store = new kb.Store();
      this.__kb.store_is_owned = true;
    }
    if (options.hasOwnProperty('view_model')) {
      if (!options.view_model) {
        throw new Error('Knockback.CollectionObservable: options.view_model is empty');
      }
      this.view_model_create_fn = options.view_model;
      this.view_model_create_with_new = true;
    } else if (options.hasOwnProperty('view_model_constructor')) {
      if (!options.view_model_constructor) {
        throw new Error('Knockback.CollectionObservable: options.view_model_constructor is empty');
      }
      kb.utils.legacyWarning('kb.collectionObservable option view_model_constructor', '0.16.0', 'Please use view_model option instead');
      this.view_model_create_fn = options.view_model_constructor;
      this.view_model_create_with_new = true;
    } else if (options.hasOwnProperty('view_model_create')) {
      if (!options.view_model_create) {
        throw new Error('Knockback.CollectionObservable: options.view_model_create is empty');
      }
      this.view_model_create_fn = options.view_model_create;
    } else if (options.hasOwnProperty('create')) {
      if (!options.create) {
        throw new Error('Knockback.CollectionObservable: options.create is empty');
      }
      this.view_model_create_fn = options.create;
    }
    this.sort_attribute = options.sort_attribute;
    this.sorted_index = options.sorted_index;
    this.__kb._onCollectionReset = _.bind(this._onCollectionReset, this);
    this.__kb._onCollectionResort = _.bind(this._onCollectionResort, this);
    this.__kb._onModelAdd = _.bind(this._onModelAdd, this);
    this.__kb._onModelRemove = _.bind(this._onModelRemove, this);
    this.__kb._onModelChange = _.bind(this._onModelChange, this);
    if (bind_model_changes && collection) {
      collection.bind('change', function() {
        return kb.utils.wrappedObservable(_this).valueHasMutated();
      });
    }
    observable.retain = _.bind(this.retain, this);
    observable.refCount = _.bind(this.refCount, this);
    observable.release = _.bind(this.release, this);
    observable.collection = _.bind(this.collection, this);
    observable.viewModelByModel = _.bind(this.viewModelByModel, this);
    observable.sortedIndex = _.bind(this.sortedIndex, this);
    observable.sortAttribute = _.bind(this.sortAttribute, this);
    observable.hasViewModels = _.bind(this.hasViewModels, this);
    observable.bind = _.bind(this.bind, this);
    observable.unbind = _.bind(this.unbind, this);
    observable.trigger = _.bind(this.trigger, this);
    this.collection(collection, {
      silent: true,
      defer: options.defer
    });
    return observable;
  }

  CollectionObservable.prototype.__destroy = function() {
    this.collection(null);
    if (this.hasViewModels() && this.__kb.store_is_owned) {
      this.__kb.store.destroy();
      this.__kb.store = null;
    }
    this.view_model_create_fn = null;
    this.__kb.collection = null;
    kb.utils.wrappedObservable(this, null);
    CollectionObservable.__super__.__destroy.apply(this, arguments);
    if (Knockback.stats_on) {
      return kb.stats.collection_observables--;
    }
  };

  CollectionObservable.prototype.retain = function() {
    CollectionObservable.__super__.retain.apply(this, arguments);
    return kb.utils.wrappedObservable(this);
  };

  CollectionObservable.prototype.release = function() {
    var observable;
    observable = kb.utils.wrappedObservable(this);
    CollectionObservable.__super__.release.apply(this, arguments);
    return observable;
  };

  CollectionObservable.prototype.collection = function(new_collection, options) {
    var observable, _base, _base1;
    observable = kb.utils.wrappedObservable(this);
    if (arguments.length === 0) {
      observable();
      return this.__kb.collection;
    }
    if (new_collection === this.__kb.collection) {
      return;
    }
    if (this.__kb.collection) {
      this._clear();
      this._collectionUnbind(this.__kb.collection);
      if (typeof (_base = this.__kb.collection).release === "function") {
        _base.release();
      }
      this.__kb.collection = null;
    }
    this.__kb.collection = new_collection;
    if (this.__kb.collection) {
      if (typeof (_base1 = this.__kb.collection).retain === "function") {
        _base1.retain();
      }
      this._collectionBind(this.__kb.collection);
      return this.sortedIndex(this.sorted_index, this.sort_attribute, options);
    }
  };

  CollectionObservable.prototype.sortedIndex = function(sorted_index, sort_attribute, options) {
    var _resync,
      _this = this;
    if (options == null) {
      options = {};
    }
    if (sorted_index) {
      this.sorted_index = sorted_index;
      this.sort_attribute = sort_attribute;
    } else if (sort_attribute) {
      this.sort_attribute = sort_attribute;
      this.sorted_index = this._sortAttributeFn(sort_attribute);
    } else {
      this.sort_attribute = null;
      this.sorted_index = null;
    }
    _resync = function() {
      var observable;
      observable = kb.utils.wrappedObservable(_this);
      if ((_this.__kb.collection.models.length === 0) && (observable().length === 0)) {
        return;
      }
      _this._collectionResync(true);
      if (!options.silent) {
        return _this.trigger('resort', observable());
      }
    };
    if (options.defer) {
      _.defer(_resync);
    } else {
      _resync();
    }
    return this;
  };

  CollectionObservable.prototype.sortAttribute = function(sort_attribute, sorted_index, silent) {
    return this.sortedIndex(sorted_index, sort_attribute, silent);
  };

  CollectionObservable.prototype.viewModelByModel = function(model) {
    var id_attribute, observable;
    if (!this.hasViewModels()) {
      return null;
    }
    observable = kb.utils.wrappedObservable(this);
    id_attribute = model.hasOwnProperty(model.idAttribute) ? model.idAttribute : 'cid';
    return _.find(observable(), function(test) {
      return test.__kb.model[id_attribute] === model[id_attribute];
    });
  };

  CollectionObservable.prototype.hasViewModels = function() {
    return !!this.view_model_create_fn;
  };

  CollectionObservable.prototype._collectionBind = function(collection) {
    var event, _i, _j, _len, _len1, _ref, _ref1;
    if (!collection) {
      return;
    }
    collection.bind('reset', this.__kb._onCollectionReset);
    if (!this.sorted_index) {
      collection.bind('resort', this.__kb._onCollectionResort);
    }
    _ref = ['new', 'add'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      event = _ref[_i];
      collection.bind(event, this.__kb._onModelAdd);
    }
    _ref1 = ['remove', 'destroy'];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      event = _ref1[_j];
      collection.bind(event, this.__kb._onModelRemove);
    }
    return collection.bind('change', this.__kb._onModelChange);
  };

  CollectionObservable.prototype._collectionUnbind = function(collection) {
    var event, _i, _j, _len, _len1, _ref, _ref1;
    if (!collection) {
      return;
    }
    collection.unbind('reset', this.__kb._onCollectionReset);
    if (!this.sorted_index) {
      collection.unbind('resort', this.__kb._onCollectionResort);
    }
    _ref = ['new', 'add'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      event = _ref[_i];
      collection.unbind(event, this.__kb._onModelAdd);
    }
    _ref1 = ['remove', 'destroy'];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      event = _ref1[_j];
      collection.unbind(event, this.__kb._onModelRemove);
    }
    return collection.unbind('change', this.__kb._onModelChange);
  };

  CollectionObservable.prototype._onCollectionReset = function() {
    return this._collectionResync();
  };

  CollectionObservable.prototype._onCollectionResort = function(model_or_models) {
    var observable;
    if (this.sorted_index) {
      throw new Error("CollectionObservable: collection sorted_index unexpected");
    }
    if (_.isArray(model_or_models)) {
      observable = kb.utils.wrappedObservable(this);
      return this.trigger('resort', observable());
    } else {
      return this._onModelResort(model_or_models);
    }
  };

  CollectionObservable.prototype._onModelAdd = function(model) {
    var add_index, observable, target;
    target = this.hasViewModels() ? this._createTarget(model) : model;
    observable = kb.utils.wrappedObservable(this);
    if (this.sorted_index) {
      add_index = this.sorted_index(observable(), target);
    } else {
      add_index = this.__kb.collection.indexOf(model);
    }
    observable.splice(add_index, 0, target);
    return this.trigger('add', target, observable());
  };

  CollectionObservable.prototype._onModelRemove = function(model) {
    var observable, target;
    target = this.hasViewModels() ? this.viewModelByModel(model) : model;
    if (!target) {
      return;
    }
    observable = kb.utils.wrappedObservable(this);
    observable.remove(target);
    this.trigger('remove', target, observable);
    if (this.hasViewModels()) {
      return this.__kb.store.release(target);
    }
  };

  CollectionObservable.prototype._onModelChange = function(model) {
    if (this.sorted_index && (!this.sort_attribute || model.hasChanged(this.sort_attribute))) {
      return this._onModelResort(model);
    }
  };

  CollectionObservable.prototype._onModelResort = function(model) {
    var new_index, observable, previous_index, sorted_targets, target;
    observable = kb.utils.wrappedObservable(this);
    target = this.hasViewModels() ? this.viewModelByModel(model) : model;
    previous_index = observable.indexOf(target);
    if (this.sorted_index) {
      sorted_targets = _.clone(observable());
      sorted_targets.splice(previous_index, 1);
      new_index = this.sorted_index(sorted_targets, target);
    } else {
      new_index = this.__kb.collection.indexOf(model);
    }
    if (previous_index === new_index) {
      return;
    }
    observable.splice(previous_index, 1);
    observable.splice(new_index, 0, target);
    return this.trigger('resort', target, observable(), new_index);
  };

  CollectionObservable.prototype._clear = function(silent) {
    var observable, target, targets, _i, _len, _results;
    observable = kb.utils.wrappedObservable(this);
    if (!silent) {
      this.trigger('remove', observable());
    }
    targets = observable.removeAll();
    if (this.hasViewModels()) {
      _results = [];
      for (_i = 0, _len = targets.length; _i < _len; _i++) {
        target = targets[_i];
        _results.push(this.__kb.store.release(target));
      }
      return _results;
    }
  };

  CollectionObservable.prototype._collectionResync = function(silent) {
    var add_index, model, observable, target, targets, _i, _len, _ref,
      _this = this;
    this._clear(silent);
    observable = kb.utils.wrappedObservable(this);
    if (this.sorted_index) {
      targets = [];
      _ref = this.__kb.collection.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        target = this._createTarget(model);
        add_index = this.sorted_index(targets, target);
        targets.splice(add_index, 0, target);
      }
    } else {
      targets = this.hasViewModels() ? _.map(this.__kb.collection.models, function(model) {
        return _this._createTarget(model);
      }) : _.clone(this.__kb.collection.models);
    }
    observable(targets);
    if (!silent) {
      return this.trigger('add', observable());
    }
  };

  CollectionObservable.prototype._sortAttributeFn = function(sort_attribute) {
    if (this.hasViewModels()) {
      return function(view_models, model) {
        return _.sortedIndex(view_models, model, function(test) {
          return kb.utils.wrappedModel(test).get(sort_attribute);
        });
      };
    } else {
      return function(models, model) {
        return _.sortedIndex(models, model, function(test) {
          return test.get(sort_attribute);
        });
      };
    }
  };

  CollectionObservable.prototype._createTarget = function(model) {
    var create_fn,
      _this = this;
    create_fn = function() {
      var observable, options, view_model;
      options = _this.__kb.store.addResolverToOptions({}, model);
      observable = kb.utils.wrappedObservable(_this);
      view_model = _this.view_model_create_with_new ? new _this.view_model_create_fn(model, options, observable) : _this.view_model_create_fn(model, options, observable);
      kb.utils.wrappedModel(view_model, model);
      return view_model;
    };
    if (this.hasViewModels()) {
      return this.__kb.store.resolve(model, create_fn);
    } else {
      return model;
    }
  };

  return CollectionObservable;

})(kb.RefCountable);

__extends(Knockback.CollectionObservable.prototype, Backbone.Events);

Knockback.collectionObservable = function(collection, options, legacy) {
  return new Knockback.CollectionObservable(collection, options, legacy);
};

Knockback.sortedIndexWrapAttr = Knockback.siwa = function(attribute_name, wrapper_constructor) {
  return function(models, model) {
    return _.sortedIndex(models, model, function(test) {
      return new wrapper_constructor(kb.utils.wrappedModel(test).get(attribute_name));
    });
  };
};
