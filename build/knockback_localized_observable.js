// Generated by CoffeeScript 1.3.1
/*
  knockback_localized_observable.js
  (c) 2011 Kevin Malakoff.
  Knockback.LocalizedObservable is freely distributable under the MIT license.
  See the following for full license details:
    https://github.com/kmalakoff/knockback/blob/master/LICENSE
*/

Knockback.LocalizedObservable = (function() {

  LocalizedObservable.name = 'LocalizedObservable';

  LocalizedObservable.extend = Backbone.Model.extend;

  function LocalizedObservable(value, options, view_model) {
    var observable;
    this.value = value;
    this.options = options != null ? options : {};
    this.view_model = view_model != null ? view_model : {};
    if (!(this.options.read || this.read)) {
      throw new Error('LocalizedObservable: options.read is missing');
    }
    if (this.options.read && this.read) {
      throw new Error('LocalizedObservable: options.read and read class function exist. You need to choose one.');
    }
    if (this.options.write && this.write) {
      throw new Error('LocalizedObservable: options.write and write class function exist. You need to choose one.');
    }
    if (!kb.locale_manager) {
      throw new Error('LocalizedObservable: Knockback.locale_manager is not defined');
    }
    this.__kb = {};
    this.__kb._onLocaleChange = _.bind(this._onLocaleChange, this);
    if (this.value) {
      value = ko.utils.unwrapObservable(this.value);
    }
    this.__kb.value_observable = ko.observable(!value ? this._getDefaultValue() : this.read.call(this, value, null));
    if (this.write && !(typeof this.write === 'function')) {
      throw new Error('LocalizedObservable: options.write is not a function for read_write model attribute');
    }
    observable = kb.utils.wrappedObservable(this, ko.dependentObservable({
      read: _.bind(this._onGetValue, this),
      write: this.write ? _.bind(this._onSetValue, this) : (function() {
        throw new Error("Knockback.LocalizedObservable: value is read only");
      }),
      owner: this.view_model
    }));
    observable.destroy = _.bind(this.destroy, this);
    observable.observedValue = _.bind(this.observedValue, this);
    observable.setToDefault = _.bind(this.setToDefault, this);
    observable.resetToCurrent = _.bind(this.resetToCurrent, this);
    kb.locale_manager.bind('change', this.__kb._onLocaleChange);
    return observable;
  }

  LocalizedObservable.prototype.destroy = function() {
    kb.locale_manager.unbind('change', this.__kb._onLocaleChange);
    this.__kb.value_observable = null;
    kb.utils.wrappedObservable(this).dispose();
    kb.utils.wrappedObservable(this, null);
    this.options = {};
    this.view_model = null;
    return this.__kb = null;
  };

  LocalizedObservable.prototype.setToDefault = function() {
    var current_value, default_value;
    if (!this["default"]) {
      return;
    }
    default_value = this._getDefaultValue();
    current_value = this.__kb.value_observable();
    if (current_value !== default_value) {
      return this._onSetValue(default_value);
    } else {
      return this.__kb.value_observable.valueHasMutated();
    }
  };

  LocalizedObservable.prototype.resetToCurrent = function() {
    this.__kb.value_observable(null);
    return this._onSetValue(this._getCurrentValue());
  };

  LocalizedObservable.prototype.observedValue = function(value) {
    if (arguments.length === 0) {
      return this.value;
    }
    this.value = value;
    this._onLocaleChange();
    return this;
  };

  LocalizedObservable.prototype._getDefaultValue = function() {
    if (!this["default"]) {
      return '';
    }
    if (typeof this["default"] === 'function') {
      return this["default"]();
    } else {
      return this["default"];
    }
  };

  LocalizedObservable.prototype._getCurrentValue = function() {
    var observable;
    observable = kb.utils.wrappedObservable(this);
    if (!(this.value && observable)) {
      return this._getDefaultValue();
    }
    return this.read.call(this, ko.utils.unwrapObservable(this.value));
  };

  LocalizedObservable.prototype._onGetValue = function() {
    if (this.value) {
      ko.utils.unwrapObservable(this.value);
    }
    return this.__kb.value_observable();
  };

  LocalizedObservable.prototype._onSetValue = function(value) {
    this.write.call(this, value, ko.utils.unwrapObservable(this.value));
    value = this.read.call(this, ko.utils.unwrapObservable(this.value));
    this.__kb.value_observable(value);
    if (this.options.onChange) {
      return this.options.onChange(value);
    }
  };

  LocalizedObservable.prototype._onLocaleChange = function() {
    var value;
    value = this.read.call(this, ko.utils.unwrapObservable(this.value));
    this.__kb.value_observable(value);
    if (this.options.onChange) {
      return this.options.onChange(value);
    }
  };

  return LocalizedObservable;

})();

Knockback.localizedObservable = function(value, options, view_model) {
  return new Knockback.LocalizedObservable(value, options, view_model);
};
