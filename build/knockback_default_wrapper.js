// Generated by CoffeeScript 1.3.1
/*
  knockback_default_wrapper.js
  (c) 2011 Kevin Malakoff.
  Knockback.DefaultWrapper is freely distributable under the MIT license.
  See the following for full license details:
    https://github.com/kmalakoff/knockback/blob/master/LICENSE
*/

if (!this.Knockback) {
  throw new Error('Knockback: Dependency alert! knockback_core.js must be included before this file');
}

Knockback.DefaultWrapper = (function() {

  DefaultWrapper.name = 'DefaultWrapper';

  function DefaultWrapper(target_observable, default_value_observable) {
    var observable,
      _this = this;
    this.default_value_observable = default_value_observable;
    this.__kb = {};
    observable = kb.utils.wrappedObservable(this, ko.dependentObservable({
      read: function() {
        var current_default, current_target;
        current_target = ko.utils.unwrapObservable(target_observable());
        current_default = ko.utils.unwrapObservable(_this.default_value_observable);
        if (!current_target) {
          return current_default;
        } else {
          return current_target;
        }
      },
      write: function(value) {
        return target_observable(value);
      }
    }));
    observable.destroy = _.bind(this.destroy, this);
    observable.setToDefault = _.bind(this.setToDefault, this);
    return observable;
  }

  DefaultWrapper.prototype.destroy = function() {
    kb.utils.wrappedObservable(this, null);
    return this.default_value = null;
  };

  DefaultWrapper.prototype.setToDefault = function() {
    var observable;
    observable = kb.utils.wrappedObservable(this);
    return observable(this.default_value_observable);
  };

  return DefaultWrapper;

})();

Knockback.defaultWrapper = function(target, default_value) {
  return new Knockback.DefaultWrapper(target, default_value);
};
