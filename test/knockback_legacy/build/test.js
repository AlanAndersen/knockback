// Generated by CoffeeScript 1.3.1

$(document).ready(function() {
  module("knockback legacy.js");
  test("TEST DEPENDENCY MISSING", function() {
    ko.utils;
    _.VERSION;
    return Backbone.VERSION;
  });
  test("Deprecated utility functions still exist", function() {
    Knockback.wrappedObservable({
      __kb: {
        observable: {}
      }
    });
    Knockback.vmModel({
      __kb: {
        model: {}
      }
    });
    Knockback.vmSetToDefault({});
    Knockback.vmRelease({});
    return Knockback.vmReleaseObservable(ko.observable());
  });
  test("Deprecated functionality of kb.observable", function() {
    var model, observable;
    model = new Backbone.Model({
      name: 'name1'
    });
    observable = kb.observable(model, {
      key: 'name',
      write: true
    });
    observable('name2');
    equal(observable(), 'name2', "Name was written");
    equal(model.get('name'), 'name2', "Name was written");
    model = new Backbone.Model({
      name: 'name1'
    });
    observable = kb.observable(model, {
      key: 'name',
      write: false
    });
    raises((function() {
      return observable('name2');
    }), Error, "Knockback.Observable: name is read only");
    equal(observable(), 'name1', "Name was not written");
    equal(model.get('name'), 'name1', "Name not was written");
    model = new Backbone.Model({
      name: 'name1'
    });
    observable = kb.observable(model, 'name');
    observable('name2');
    equal(observable(), 'name2', "Name was not written");
    equal(model.get('name'), 'name2', "Name not was written");
    model = new Backbone.Model({
      name: 'name1'
    });
    observable = kb.observable(model, {
      key: 'name'
    });
    observable('name2');
    equal(observable(), 'name2', "Name was not written");
    equal(model.get('name'), 'name2', "Name not was written");
    model = new Backbone.Model({
      name: 'name1'
    });
    observable = kb.observable(model, {
      key: 'name',
      read_only: true
    });
    raises((function() {
      return observable('name2');
    }), Error, "Knockback.Observable: name is read only");
    equal(observable(), 'name1', "Name was not written");
    return equal(model.get('name'), 'name1', "Name not was written");
  });
  test("Deprecated functionality of kb.observables", function() {
    var model, observables;
    model = new Backbone.Model({
      name: 'name1'
    });
    observables = kb.observables(model, {
      name: {
        key: 'name',
        write: true
      }
    });
    observables.name('name2');
    equal(observables.name(), 'name2', "Name was written");
    equal(model.get('name'), 'name2', "Name was written");
    model = new Backbone.Model({
      name: 'name1'
    });
    observables = kb.observables(model, {
      name: {
        key: 'name',
        write: false
      }
    });
    raises((function() {
      return observables.name('name2');
    }), Error, "Knockback.Observable: name is read only");
    equal(observables.name(), 'name1', "Name was not written");
    equal(model.get('name'), 'name1', "Name not was written");
    model = new Backbone.Model({
      name: 'name1'
    });
    observables = kb.observables(model, {
      name: {
        key: 'name'
      }
    }, {}, {
      write: true
    });
    observables.name('name2');
    equal(observables.name(), 'name2', "Name was written");
    equal(model.get('name'), 'name2', "Name was written");
    model = new Backbone.Model({
      name: 'name1'
    });
    observables = kb.observables(model, {
      name: {
        key: 'name'
      }
    }, {}, {
      write: false
    });
    raises((function() {
      return observables.name('name2');
    }), Error, "Knockback.Observable: name is read only");
    equal(observables.name(), 'name1', "Name was not written");
    equal(model.get('name'), 'name1', "Name not was written");
    model = new Backbone.Model({
      name: 'name1'
    });
    observables = kb.observables(model, {
      name: {}
    });
    observables.name('name2');
    equal(observables.name(), 'name2', "Name was not written");
    equal(model.get('name'), 'name2', "Name not was written");
    model = new Backbone.Model({
      name: 'name1'
    });
    observables = kb.observables(model, {
      name: {
        key: 'name'
      }
    });
    observables.name('name2');
    equal(observables.name(), 'name2', "Name was not written");
    equal(model.get('name'), 'name2', "Name not was written");
    model = new Backbone.Model({
      name: 'name1'
    });
    observables = kb.observables(model, {
      name: {
        key: 'name',
        read_only: true
      }
    });
    raises((function() {
      return observables.name('name2');
    }), Error, "Knockback.Observable: name is read only");
    equal(observables.name(), 'name1', "Name was not written");
    equal(model.get('name'), 'name1', "Name not was written");
    model = new Backbone.Model({
      name: 'name1'
    });
    observables = kb.observables(model, {
      name: {
        read_only: true
      }
    });
    raises((function() {
      return observables.name('name2');
    }), Error, "Knockback.Observable: name is read only");
    equal(observables.name(), 'name1', "Name was not written");
    equal(model.get('name'), 'name1', "Name not was written");
    model = new Backbone.Model({
      name: 'name1'
    });
    observables = kb.observables(model, {
      name: {
        key: 'name'
      }
    }, {}, true);
    raises((function() {
      return observables.name('name2');
    }), Error, "Knockback.Observable: name is read only");
    equal(observables.name(), 'name1', "Name was not written");
    return equal(model.get('name'), 'name1', "Name not was written");
  });
  test("Deprecated functionality of kb.CollectionObservable", function() {
    var Test, a, call_count, co, collection, collection_observable, m, test_dependency, vm, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    Test = (function() {

      Test.name = 'Test';

      function Test(model) {
        ({});
      }

      return Test;

    })();
    a = ko.observableArray();
    co = kb.collectionObservable(new Backbone.Collection([
      new Backbone.Model({
        name: 'name1'
      }), new Backbone.Model({
        name: 'name2'
      })
    ]), a);
    equal(a().length, 2, 'Array: Models created');
    equal(co().length, 2, 'Collection: Models created');
    equal(a, co, 'Observable is identical');
    _ref = a();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      ok(_.contains(['name1', 'name2'], m.get('name')), 'Expected name');
      ok(m instanceof Backbone.Model, 'Expected Type');
    }
    a = ko.observableArray();
    co = kb.collectionObservable(new Backbone.Collection([
      new Backbone.Model({
        name: 'name1'
      }), new Backbone.Model({
        name: 'name2'
      })
    ]), a, {
      view_model: Test
    });
    equal(a().length, 2, 'Array: View Models created');
    equal(co().length, 2, 'Collection: View Models created');
    equal(a, co, 'Observable is identical');
    _ref1 = a();
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      vm = _ref1[_j];
      ok(_.contains(['name1', 'name2'], kb.utils.wrappedModel(vm).get('name')), 'Expected name');
      ok(vm instanceof Test, 'Expected Type');
    }
    a = ko.observableArray();
    co = kb.collectionObservable(new Backbone.Collection([
      new Backbone.Model({
        name: 'name1'
      }), new Backbone.Model({
        name: 'name2'
      })
    ]), a, {
      view_model_constructor: Test
    });
    equal(a().length, 2, 'Array: View Models created');
    equal(co().length, 2, 'Collection: View Models created');
    equal(a, co, 'Observable is identical');
    _ref2 = a();
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      vm = _ref2[_k];
      ok(_.contains(['name1', 'name2'], kb.utils.wrappedModel(vm).get('name')), 'Expected name');
      ok(vm instanceof Test, 'Expected Type');
    }
    a = ko.observableArray();
    co = kb.collectionObservable(new Backbone.Collection([
      new Backbone.Model({
        name: 'name1'
      }), new Backbone.Model({
        name: 'name2'
      })
    ]), a);
    collection = co.collection();
    call_count = 0;
    test_dependency = ko.dependentObservable(function() {
      call_count++;
      return co();
    });
    collection.models[0].set({
      name: 'name1_plus'
    });
    equal(call_count, 2, 'Deprecated model update triggering still works');
    co = kb.collectionObservable(new Backbone.Collection([
      new Backbone.Model({
        name: 'name1'
      }), new Backbone.Model({
        name: 'name2'
      })
    ]));
    collection = co.collection();
    call_count = 0;
    test_dependency = ko.dependentObservable(function() {
      call_count++;
      return co();
    });
    collection.models[0].set({
      name: 'name1_plus'
    });
    equal(call_count, 1, 'Model triggering was disabled');
    collection.bind('change', function() {
      return co.valueHasMutated();
    });
    collection.models[0].set({
      name: 'name1_plus_plus'
    });
    equal(call_count, 2, 'Manual model triggering works instead');
    collection_observable = kb.collectionObservable(new Backbone.Collection([
      {
        name: 'name2'
      }, {
        name: 'name1'
      }
    ]), {
      sorted_index: function(models, model) {
        return _.sortedIndex(models, model, function(test) {
          return test.get('name');
        });
      }
    });
    equal(collection_observable()[0].get('name'), 'name1', 'Name is right: name1');
    equal(collection_observable()[1].get('name'), 'name2', 'Name is right: name2');
    collection_observable = kb.collectionObservable(new Backbone.Collection([
      {
        name: 'name2'
      }, {
        name: 'name1'
      }
    ]), {
      view_model: kb.ViewModel,
      sorted_index: function(models, model) {
        return _.sortedIndex(models, model, function(test) {
          return kb.utils.wrappedModel(test).get('name');
        });
      }
    });
    equal(kb.utils.wrappedModel(collection_observable()[0]).get('name'), 'name1', 'Name is right: name1');
    return equal(kb.utils.wrappedModel(collection_observable()[1]).get('name'), 'name2', 'Name is right: name2');
  });
  return test("Error cases", function() {});
});
