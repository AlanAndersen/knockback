// Generated by CoffeeScript 1.3.1

$(document).ready(function() {
  module("knockback_core utils");
  test("TEST DEPENDENCY MISSING", function() {
    ko.utils;
    _.VERSION;
    return Backbone.VERSION;
  });
  test("Knockback.utils.wrappedObservable", function() {
    var instance, observable;
    observable = ko.observable();
    instance = {};
    raises((function() {
      return kb.utils.wrappedObservable(instance);
    }), Error, "Knockback: instance is not wrapping an observable");
    kb.utils.wrappedObservable(instance, observable);
    return equal(kb.utils.wrappedObservable(instance), observable, "observable was wrapped");
  });
  test("Knockback.utils.observableInstanceOf", function() {
    equal(kb.utils.observableInstanceOf(kb.simpleAttributeConnector(new Backbone.Model({
      name: 'name1'
    }), 'name'), kb.AttributeConnector), true, "Instance is kb.AttributeConnector");
    equal(kb.utils.observableInstanceOf(kb.simpleAttributeConnector(new Backbone.Model({
      name: 'name1'
    }), 'name'), kb.SimpleAttributeConnector), true, "Instance is kb.SimpleAttributeConnector");
    equal(kb.utils.observableInstanceOf(kb.collectionAttributeConnector(new Backbone.Model({
      name: new Backbone.Collection()
    }), 'name'), kb.AttributeConnector), true, "Instance is kb.AttributeConnector");
    equal(kb.utils.observableInstanceOf(kb.collectionAttributeConnector(new Backbone.Model({
      name: new Backbone.Collection()
    }), 'name'), kb.CollectionAttributeConnector), true, "Instance is kb.CollectionAttributeConnector");
    equal(kb.utils.observableInstanceOf(kb.viewModelAttributeConnector(new Backbone.Model({
      name: new Backbone.Model()
    }), 'name', {
      view_model: function() {}
    }), kb.AttributeConnector), true, "Instance is kb.AttributeConnector");
    equal(kb.utils.observableInstanceOf(kb.viewModelAttributeConnector(new Backbone.Model({
      name: new Backbone.Model()
    }), 'name', {
      view_model: function() {}
    }), kb.ViewModelAttributeConnector), true, "Instance is kb.ViewModelAttributeConnector");
    equal(kb.utils.observableInstanceOf(kb.collectionObservable(new Backbone.Collection()), kb.CollectionObservable), true, "Instance is kb.CollectionObservable");
    kb.locale_manager = new Backbone.Model();
    equal(kb.utils.observableInstanceOf(kb.localizedObservable(ko.observable(), {
      read: function() {}
    }), kb.LocalizedObservable), true, "Instance is kb.LocalizedObservable");
    equal(kb.utils.observableInstanceOf(kb.observable(new Backbone.Model({
      name: 'name1'
    }), 'name'), kb.Observable), true, "Instance is kb.Observable");
    return equal(kb.utils.observableInstanceOf(kb.triggeredObservable(new Backbone.Model({
      name: 'name1'
    }), 'name'), kb.TriggeredObservable), true, "Instance is kb.TriggeredObservable");
  });
  test("Knockback.utils.wrappedModel", function() {
    var instance, model;
    model = new Backbone.Model();
    instance = {};
    equal(kb.utils.wrappedModel(instance), instance, "no model was wrapped so return the instance");
    kb.utils.wrappedModel(instance, model);
    return equal(kb.utils.wrappedModel(instance), model, "model was wrapped");
  });
  test("Knockback.utils.setToDefault", function() {});
  test("Knockback.utils.release", function() {});
  test("Knockback.utils.optionsCreateClear", function() {});
  test("Knockback.utils.optionsCreateOverride", function() {});
  return test("Error cases", function() {});
});
