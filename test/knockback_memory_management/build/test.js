// Generated by CoffeeScript 1.3.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

$(document).ready(function() {
  var DestroyableViewModel, Person, RefCountableViewModel, SimpleViewModel;
  module("knockback.js memory management");
  test("TEST DEPENDENCY MISSING", function() {
    ko.utils;
    _.VERSION;
    return Backbone.VERSION;
  });
  RefCountableViewModel = (function(_super) {

    __extends(RefCountableViewModel, _super);

    RefCountableViewModel.name = 'RefCountableViewModel';

    function RefCountableViewModel() {
      RefCountableViewModel.__super__.constructor.apply(this, arguments);
      RefCountableViewModel.view_models.push(this);
    }

    RefCountableViewModel.prototype.__destroy = function() {
      return RefCountableViewModel.view_models.splice(RefCountableViewModel.view_models.indexOf(this), 1);
    };

    RefCountableViewModel.view_models = [];

    return RefCountableViewModel;

  })(kb.RefCountable);
  DestroyableViewModel = (function() {

    DestroyableViewModel.name = 'DestroyableViewModel';

    function DestroyableViewModel() {
      DestroyableViewModel.view_models.push(this);
    }

    DestroyableViewModel.prototype.destroy = function() {
      return DestroyableViewModel.view_models.splice(DestroyableViewModel.view_models.indexOf(this), 1);
    };

    DestroyableViewModel.view_models = [];

    return DestroyableViewModel;

  })();
  SimpleViewModel = (function() {

    SimpleViewModel.name = 'SimpleViewModel';

    function SimpleViewModel() {
      this.prop = ko.observable();
      SimpleViewModel.view_models.push(this);
    }

    SimpleViewModel.view_models = [];

    return SimpleViewModel;

  })();
  Person = (function(_super) {

    __extends(Person, _super);

    Person.name = 'Person';

    function Person() {
      return Person.__super__.constructor.apply(this, arguments);
    }

    Person.prototype.relations = [
      {
        type: Backbone.HasMany,
        key: 'friends',
        relatedModel: Person
      }
    ];

    return Person;

  })(Backbone.RelationalModel);
  kb.locale_manager = new Backbone.Model();
  test("Basic view model properties", function() {
    var ViewModel, index, nested_view_model, view_model, _i;
    nested_view_model = kb.viewModel(new Backbone.Model({
      name: 'name1'
    }));
    ViewModel = function() {
      this.prop1 = ko.observable();
      this.prop2 = ko.observableArray([]);
      this.prop3 = ko.dependentObservable(function() {
        return true;
      });
      this.prop4 = kb.observable(new Backbone.Model({
        name: 'name1'
      }), 'name');
      this.prop5 = kb.observables(new Backbone.Model({
        name: 'name1'
      }), {
        name: {}
      }, this);
      this.prop5 = kb.collectionObservable(new Backbone.Collection());
      this.prop6 = nested_view_model;
      this.prop7 = kb.simpleAttributeConnector(new Backbone.Model({
        name: 'name1'
      }), 'name');
      this.prop8 = kb.collectionAttributeConnector(new Backbone.Model({
        name: new Backbone.Collection()
      }), 'name');
      this.prop9 = kb.viewModelAttributeConnector(new Backbone.Model({
        name: new Backbone.Model()
      }), 'name', {
        view_model: function() {}
      });
      this.prop10 = kb.collectionObservable(new Backbone.Collection());
      this.prop11 = kb.localizedObservable(ko.observable(), {
        read: function() {}
      });
      this.prop12 = kb.localizedObservable(ko.observable(), {
        read: function() {}
      });
      this.prop13 = kb.triggeredObservable(new Backbone.Model({
        name: 'name1'
      }), 'name');
      return this;
    };
    view_model = new ViewModel();
    kb.utils.release(view_model);
    for (index = _i = 1; _i <= 13; index = ++_i) {
      ok(!view_model["prop" + index], "Property released: prop" + index);
    }
    ok(!view_model.name, "Property released: view_model.name");
    return ok(!nested_view_model.name, "Property released: nested_view_model.name");
  });
  test("kb.RefCountable", function() {
    var RefViewModel, ref_counted, view_model;
    RefViewModel = (function(_super) {

      __extends(RefViewModel, _super);

      RefViewModel.name = 'RefViewModel';

      function RefViewModel() {
        RefViewModel.__super__.constructor.apply(this, arguments);
        this.prop = kb.observable(new Backbone.Model({
          name: 'name1'
        }), 'name');
      }

      RefViewModel.prototype.__destroy = function() {
        kb.utils.release(this.prop);
        return this.prop = null;
      };

      return RefViewModel;

    })(kb.RefCountable);
    ref_counted = new RefViewModel();
    view_model = {
      ref_counted: ref_counted.retain()
    };
    kb.utils.release(view_model);
    ok(!view_model.ref_counted, "Property released: view_model.ref_counted");
    ok(!!ref_counted.prop, "Property not released: ref_counted.prop");
    ref_counted.release();
    return ok(!ref_counted.prop, "Property released: ref_counted.prop");
  });
  test("kb.CollectionObservable", function() {
    var collection, instance, view_model, _i, _len, _ref, _results;
    RefCountableViewModel.view_models = [];
    collection = kb.collectionObservable(new Backbone.Collection([
      {
        name: 'name1'
      }, {
        name: 'name2'
      }
    ]), {
      view_model: RefCountableViewModel
    });
    equal(RefCountableViewModel.view_models.length, 2, "Created: 2");
    instance = collection()[0].retain();
    kb.utils.release(collection);
    equal(RefCountableViewModel.view_models.length, 0, "All destroyed");
    equal(instance.refCount(), 0, "All instances were destroyed in the collection's store");
    DestroyableViewModel.view_models = [];
    collection = kb.collectionObservable(new Backbone.Collection([
      {
        name: 'name1'
      }, {
        name: 'name2'
      }
    ]), {
      view_model: DestroyableViewModel
    });
    equal(DestroyableViewModel.view_models.length, 2, "Created: 2");
    kb.utils.release(collection);
    equal(DestroyableViewModel.view_models.length, 0, "All destroyed");
    SimpleViewModel.view_models = [];
    collection = kb.collectionObservable(new Backbone.Collection([
      {
        name: 'name1'
      }, {
        name: 'name2'
      }
    ]), {
      view_model: SimpleViewModel
    });
    equal(SimpleViewModel.view_models.length, 2, "Created: 2");
    kb.utils.release(collection);
    equal(SimpleViewModel.view_models.length, 2, "Destroyed: 2");
    _ref = SimpleViewModel.view_models;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      view_model = _ref[_i];
      _results.push(ok(!view_model.prop, "Prop destroyed"));
    }
    return _results;
  });
  test("kb.CollectionObservable with external store", function() {
    var collection, instance, store, view_model, _i, _j, _len, _len1, _ref, _ref1, _results;
    store = new kb.Store();
    RefCountableViewModel.view_models = [];
    collection = kb.collectionObservable(new Backbone.Collection([
      {
        name: 'name1'
      }, {
        name: 'name2'
      }
    ]), {
      view_model: RefCountableViewModel,
      store: store
    });
    equal(RefCountableViewModel.view_models.length, 2, "Created: 2");
    instance = collection()[0].retain();
    kb.utils.release(collection);
    equal(RefCountableViewModel.view_models.length, 2, "Remaining: 2");
    equal(instance.refCount(), 2, "One instance retained and one in the store");
    store.destroy();
    store = null;
    equal(instance.refCount(), 0, "All instances were destroyed in the collection's store");
    equal(RefCountableViewModel.view_models.length, 0, "All destroyed");
    store = new kb.Store();
    DestroyableViewModel.view_models = [];
    collection = kb.collectionObservable(new Backbone.Collection([
      {
        name: 'name1'
      }, {
        name: 'name2'
      }
    ]), {
      view_model: DestroyableViewModel,
      store: store
    });
    equal(DestroyableViewModel.view_models.length, 2, "Created: 2");
    kb.utils.release(collection);
    equal(DestroyableViewModel.view_models.length, 2, "All destroyed");
    store.destroy();
    store = null;
    equal(DestroyableViewModel.view_models.length, 0, "All destroyed");
    store = new kb.Store();
    SimpleViewModel.view_models = [];
    collection = kb.collectionObservable(new Backbone.Collection([
      {
        name: 'name1'
      }, {
        name: 'name2'
      }
    ]), {
      view_model: SimpleViewModel,
      store: store
    });
    equal(SimpleViewModel.view_models.length, 2, "Created: 2");
    kb.utils.release(collection);
    equal(SimpleViewModel.view_models.length, 2, "Remaining: 2");
    _ref = SimpleViewModel.view_models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      view_model = _ref[_i];
      ok(view_model.prop, "Prop destroyed");
    }
    store.destroy();
    store = null;
    equal(SimpleViewModel.view_models.length, 2, "Destroyed: 2");
    _ref1 = SimpleViewModel.view_models;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      view_model = _ref1[_j];
      _results.push(ok(!view_model.prop, "Prop destroyed"));
    }
    return _results;
  });
  test("kb.CollectionObservable with recursive view models", function() {
    var band, collection, george, instance, john, paul, ringo, view_model, _i, _len, _ref, _results;
    john = new Person({
      id: 'person-1-1',
      name: 'John',
      friends: ['person-1-2', 'person-1-3', 'person-1-4']
    });
    paul = new Person({
      id: 'person-1-2',
      name: 'Paul',
      friends: ['person-1-1', 'person-1-3', 'person-1-4']
    });
    george = new Person({
      id: 'person-1-3',
      name: 'George',
      friends: ['person-1-1', 'person-1-2', 'person-1-4']
    });
    ringo = new Person({
      id: 'person-1-4',
      name: 'Ringo',
      friends: ['person-1-1', 'person-1-2', 'person-1-3']
    });
    band = new Backbone.Collection([john, paul, george, ringo]);
    RefCountableViewModel.view_models = [];
    collection = kb.collectionObservable(band, {
      view_model: RefCountableViewModel
    });
    equal(RefCountableViewModel.view_models.length, 4, "Created: 4");
    instance = collection()[0].retain();
    kb.utils.release(collection);
    equal(RefCountableViewModel.view_models.length, 0, "All destroyed");
    equal(instance.refCount(), 0, "All instances were destroyed in the collection's store");
    DestroyableViewModel.view_models = [];
    collection = kb.collectionObservable(band, {
      view_model: DestroyableViewModel
    });
    equal(DestroyableViewModel.view_models.length, 4, "Created: 4");
    kb.utils.release(collection);
    equal(DestroyableViewModel.view_models.length, 0, "All destroyed");
    SimpleViewModel.view_models = [];
    collection = kb.collectionObservable(band, {
      view_model: SimpleViewModel
    });
    equal(SimpleViewModel.view_models.length, 4, "Created: 4");
    kb.utils.release(collection);
    equal(SimpleViewModel.view_models.length, 4, "Destroyed: 4");
    _ref = SimpleViewModel.view_models;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      view_model = _ref[_i];
      _results.push(ok(!view_model.prop, "Prop destroyed"));
    }
    return _results;
  });
  test("kb.CollectionObservable with recursive view models and external store", function() {
    var band, collection, george, instance, john, paul, ringo, store, view_model, _i, _j, _len, _len1, _ref, _ref1, _results;
    john = new Person({
      id: 'person-2-1',
      name: 'John',
      friends: ['person-2-2', 'person-2-3', 'person-2-4']
    });
    paul = new Person({
      id: 'person-2-2',
      name: 'Paul',
      friends: ['person-2-1', 'person-2-3', 'person-2-4']
    });
    george = new Person({
      id: 'person-2-3',
      name: 'George',
      friends: ['person-2-1', 'person-2-2', 'person-2-4']
    });
    ringo = new Person({
      id: 'person-2-4',
      name: 'Ringo',
      friends: ['person-2-1', 'person-2-2', 'person-2-3']
    });
    band = new Backbone.Collection([john, paul, george, ringo]);
    store = new kb.Store();
    RefCountableViewModel.view_models = [];
    collection = kb.collectionObservable(band, {
      view_model: RefCountableViewModel,
      store: store
    });
    equal(RefCountableViewModel.view_models.length, 4, "Created: 4");
    instance = collection()[0].retain();
    kb.utils.release(collection);
    equal(RefCountableViewModel.view_models.length, 4, "Remaining: 4");
    equal(instance.refCount(), 2, "One instance retained and one in the store");
    store.destroy();
    store = null;
    equal(instance.refCount(), 0, "All instances were destroyed in the collection's store");
    equal(RefCountableViewModel.view_models.length, 0, "All destroyed");
    store = new kb.Store();
    DestroyableViewModel.view_models = [];
    collection = kb.collectionObservable(band, {
      view_model: DestroyableViewModel,
      store: store
    });
    equal(DestroyableViewModel.view_models.length, 4, "Created: 4");
    kb.utils.release(collection);
    equal(DestroyableViewModel.view_models.length, 4, "All destroyed");
    store.destroy();
    store = null;
    equal(DestroyableViewModel.view_models.length, 0, "All destroyed");
    store = new kb.Store();
    SimpleViewModel.view_models = [];
    collection = kb.collectionObservable(band, {
      view_model: SimpleViewModel,
      store: store
    });
    equal(SimpleViewModel.view_models.length, 4, "Created: 4");
    kb.utils.release(collection);
    equal(SimpleViewModel.view_models.length, 4, "Remaining: 4");
    _ref = SimpleViewModel.view_models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      view_model = _ref[_i];
      ok(view_model.prop, "Prop destroyed");
    }
    store.destroy();
    store = null;
    equal(SimpleViewModel.view_models.length, 4, "Destroyed: 4");
    _ref1 = SimpleViewModel.view_models;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      view_model = _ref1[_j];
      _results.push(ok(!view_model.prop, "Prop destroyed"));
    }
    return _results;
  });
  return test("Error cases", function() {});
});
